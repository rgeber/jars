// https://nuxt.com/docs/api/configuration/nuxt-config

export default defineNuxtConfig({
    compatibilityDate: '2024-04-03',
    runtimeConfig: {
        public: {
            surrealdb: {
                url: 'ws://localhost:3001/rpc',
                ns: 'jars',
                db: 'jars'
            }
        }
    },
    devtools: {enabled: true},
    modules: ['@nuxt/icon', 'nuxt-oidc-auth', '@pinia/nuxt'],
    css: ['~/assets/css/nexus.scss'],
    typescript: {
        strict: true,
        typeCheck: false
    },
    postcss: {
        plugins: {
            tailwindcss: {},
            autoprefixer: {},
        },
    },
    icon: {
        customCollections: [
            {
                prefix: 'project',
                dir: './assets/icons/project'
            },
        ],
    },
    oidc: {
        defaultProvider: 'oidc',

        // Config reference: https://github.com/itpropro/nuxt-oidc-auth/tree/main#providers
        providers: {
            oidc: {

                // Autogenerated URLs don't work for authentik. Set them manually
                authorizationUrl: 'https://auth.geber.io/application/o/authorize/',
                tokenUrl: 'https://auth.geber.io/application/o/token/',
                userinfoUrl: 'https://auth.geber.io/application/o/userinfo/',
                logoutUrl: 'https://auth.geber.io/application/o/jars/end-session/',
                redirectUri: 'http://localhost:3000/auth/oidc/callback',

                // They need to be set empty for the .env variables to take effect
                // NUXT_OIDC_PROVIDERS_OIDC_CLIENT_ID
                // NUXT_OIDC_PROVIDERS_OIDC_CLIENT_SECRET
                clientId: '',
                clientSecret: '',

                // This disables the need for `openIdConfiguration`
                validateAccessToken: false,
                validateIdToken: false,

                // Set to true for the raw token to be available in the frontend
                exposeAccessToken: true,

                // Request additional user information instead of just some ID
                scope: ['openid', 'profile', 'email', 'jars', 'offline_access'],

                // Optional stuff that may come in handy

                // grantType: 'authorization_code',
                // tokenRequestType: 'form-urlencoded',
                // authenticationScheme: 'header',
            }
        },
        session: {
            expirationCheck: true,
            automaticRefresh: true,
            expirationThreshold: 10,
        },
        middleware: {

            // Seems to allow hooking into the callback to mess around with the response.
            // Untested
            globalMiddlewareEnabled: false,

            // Enables the creation of a custom login page via /auth/login
            // No username / password but really just another button from what I get.
            customLoginPage: true,
        },
    },
    pinia: {
        storesDirs: ['./stores/**'],
    },
    nitro: {
        preset: 'node-server',
        storage: { // Local file system storage for demo purposes
            oidc: {
                driver: 'fs',
                base: './.tmp/nitro/oidc'
            }
        }
    },
})